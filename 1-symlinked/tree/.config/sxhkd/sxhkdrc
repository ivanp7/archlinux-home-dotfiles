# launch programs {{{

# program launcher
super + Return
    xkb-switch -s us; \
    dmenu_run

# terminal emulator
super + ctrl + grave
    tabbed-st.sh

# scratchpad: terminal emulator
super + grave
    scratchpad.sh dropdown_terminal

# surf
super + ctrl + backslash
    tabbed-surf.sh

# scratchpad: surf
super + backslash
    scratchpad.sh dropdown_browser

# password.sh
super + question
    password.sh

# bookmark.sh
super + slash
    bookmark.sh

# calculator.sh
super + equal
    calculator.sh

# dictionary.sh
super + d
    dictionary.sh

# man.sh
super + a
    man.sh

# calendar.sh
super + minus
    calendar.sh

# ipaddr.sh
super + n
    ipaddr.sh
super + Cyrillic_te
    ipaddr.sh

# }}}
# bspwm & sxhkd hotkeys {{{

# make sxhkd reload its configuration files:
super + Escape
    pkill -USR1 -x sxhkd

# quit/restart bspwm
super + alt + {q,r}
    bspc {quit,wm -r}
super + alt + {Cyrillic_shorti,Cyrillic_ka}
    bspc {quit,wm -r}

# close and kill
super + {_,shift + }w
    bspc node -{c,k}
super + {_,shift + }Cyrillic_tse
    bspc node -{c,k}

# alternate between the tiled and monocle layout
super + m
    bspc desktop -l next
super + Cyrillic_softsign
    bspc desktop -l next

# }}}
# state/flags {{{

# set the window state
super + {t,shift + t,s,f}
    bspc node -t {tiled,pseudo_tiled,floating,fullscreen}
super + {Cyrillic_ie,shift + Cyrillic_ie,Cyrillic_yeru,Cyrillic_a}
    bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

# set the node flags
super + ctrl + {m,x,y,z}
    bspc node -g {marked,locked,sticky,private}
super + ctrl + {Cyrillic_softsign,Cyrillic_che,Cyrillic_en,Cyrillic_ya}
    bspc node -g {marked,locked,sticky,private}

# }}}
# focus/swap {{{

# send the newest marked node to the newest preselected node
super + y
    bspc node newest.marked.local -n newest.!automatic.local
super + Cyrillic_en
    bspc node newest.marked.local -n newest.!automatic.local

# swap the current node and the newest marked node
super + g
    bspc node -s newest.marked.local; \
    bspc node -f newest.marked.local; \
    bspc node -g marked
super + Cyrillic_pe
    bspc node -s newest.marked.local; \
    bspc node -f newest.marked.local; \
    bspc node -g marked

# focus the node in the given direction
super + {_,shift + }{h,j,k,l}
    bspc node -{f,s} {west,south,north,east}
super + {_,shift + }{Cyrillic_er,Cyrillic_o,Cyrillic_el,Cyrillic_de}
    bspc node -{f,s} {west,south,north,east}

# focus the node for the given path jump
super + {p,b,comma,period}
    bspc node -f @{parent,brother,first,second}
super + {Cyrillic_ze,Cyrillic_i,Cyrillic_be,Cyrillic_yu}
    bspc node -f @{parent,brother,first,second}

# focus the next/previous node in the current desktop
super + {_,shift + }c
    bspc node -f {next,prev}.local.leaf
super + {_,shift + }Cyrillic_es
    bspc node -f {next,prev}.local.leaf

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
    bspc desktop -f {prev,next}.local
super + {Cyrillic_ha,Cyrillic_hardsign}
    bspc desktop -f {prev,next}.local

# change the number of desktops
super + alt + {1,2,3,4,5,6,7,8,9,0}
    desktops.sh {1,2,3,4,5,6,7,8,9,10}
super + alt + bracket{left,right}
    desktops.sh {dec,inc}
super + alt + {Cyrillic_ha,Cyrillic_hardsign}
    desktops.sh {dec,inc}

# focus the last node/desktop
super + {ctrl + ,_}Tab
    bspc {node,desktop} -f last
super + {Cyrillic_io,Tab}
    bspc {node,desktop} -f last

# focus the older or newer node in the focus history
super + {o,i}
    bspc wm -h off; \
    bspc node {older,newer} -f; \
    bspc wm -h on
super + {Cyrillic_shcha,Cyrillic_sha}
    bspc wm -h off; \
    bspc node {older,newer} -f; \
    bspc wm -h on

# focus or send to the given desktop
super + {_,shift + }{1-9,0}
    bspc {desktop -f,node -d} '^{1-9,10}'

# }}}
# flip/rotate {{{

super + {underscore,bar}
    bspc node -F {horizontal,vertical}

super + {less,greater}
    bspc node -R {90,270}
super + shift + {Cyrillic_be,Cyrillic_yu}
    bspc node -R {90,270}

# }}}
# preselect {{{

# preselect the direction
super + ctrl + {h,j,k,l}
    bspc node -p {west,south,north,east}
super + ctrl + {Cyrillic_er,Cyrillic_o,Cyrillic_el,Cyrillic_de}
    bspc node -p {west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
    bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + ctrl + BackSpace
    bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + shift + BackSpace
    bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

# }}}
# move/resize {{{

# expand a window by moving one of its side outward
super + alt + {h,j,k,l}
    bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}
super + alt + {Cyrillic_er,Cyrillic_o,Cyrillic_el,Cyrillic_de}
    bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
super + alt + shift + {h,j,k,l}
    bspc node -z {left 20 0,bottom 0 -20,top 0 20,right -20 0}
super + alt + shift + {Cyrillic_er,Cyrillic_o,Cyrillic_el,Cyrillic_de}
    bspc node -z {left 20 0,bottom 0 -20,top 0 20,right -20 0}

# move a floating window
super + {Left,Down,Up,Right}
    bspc node -v {-20 0,0 20,0 -20,20 0}

# make split ratios equal
super + ctrl + equal
    bspc node @/ --equalize

# make split ratios balanced
super + ctrl + minus
    bspc node @/ --balance

# }}}
# miscellaneous {{{

# gap control
super + {KP_Add,KP_Subtract}
    gaps.sh {up,down}

# volume control
{XF86AudioRaiseVolume,XF86AudioLowerVolume,XF86AudioMute}
    volume-notify.sh {up,down,toggle}
ctrl + {XF86AudioRaiseVolume,XF86AudioLowerVolume,XF86AudioMute}
    volume-notify.sh

# monitor brightness control (needs sudoers permission on brightness.sh)
{XF86MonBrightnessUp,XF86MonBrightnessDown}
    backlight-notify.sh {up,down}
ctrl + {XF86MonBrightnessUp,XF86MonBrightnessDown}
    backlight-notify.sh

# lock screen
super + Home
    lock-screen.sh

# power control
super + Pause
    lock-screen.sh loginctl suspend

# make screenshot
{_,ctrl + }{_,shift + } Print
    screenshot.sh { ,-s -u} {| clip.sh image/png, }

# make screencast
alt + {_,shift + }{_,ctrl + } Print
    capture-async.sh {screen,screen/mic} {"#","+"}

# make mic record
alt + Scroll_Lock
    capture-async.sh mic

# change wallpaper
super + {_,shift + }KP_Enter
    {wallpaper-choose-picture.sh,wallpaper-choose-animation.sh}

# WM status report
super + F1
    wm-report.sh

# XKill
super + x
    xkillthis.sh

# }}}

# vim: foldmethod=marker:
